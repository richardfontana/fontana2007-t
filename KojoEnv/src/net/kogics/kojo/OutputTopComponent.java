/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.kogics.kojo;

import java.util.logging.Logger;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.Icon;
import javax.swing.JComponent;
import javax.swing.text.DefaultEditorKit;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.windows.IOContainer;
import org.openide.windows.IOContainer.CallBacks;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//net.kogics.kojo//Output//EN",
autostore = false)
public final class OutputTopComponent extends TopComponent implements IOContainer.Provider {

    private static OutputTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "OutputTopComponent";
    JComponent ioComp;
    CallBacks ioCb;

    public OutputTopComponent() {
        initComponents();

        ActionMap actionMap = getActionMap();
        final Action copyAction = new DefaultEditorKit.CopyAction();
        final Action cutAction = new DefaultEditorKit.CutAction();
        final Action pasteAction = new DefaultEditorKit.PasteAction();

        cutAction.setEnabled(false);
        copyAction.setEnabled(true);
        pasteAction.setEnabled(false);

        actionMap.put(DefaultEditorKit.copyAction, copyAction);
        actionMap.put(DefaultEditorKit.cutAction, cutAction);
        actionMap.put(DefaultEditorKit.pasteAction, pasteAction);

        setName(NbBundle.getMessage(OutputTopComponent.class, "CTL_OutputTopComponent"));
        setToolTipText(NbBundle.getMessage(OutputTopComponent.class, "HINT_OutputTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
//        putClientProperty(TopComponent.PROP_DRAGGING_DISABLED, Boolean.TRUE);
//        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);
//        putClientProperty(TopComponent.PROP_SLIDING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized OutputTopComponent getDefault() {
        if (instance == null) {
            instance = new OutputTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the OutputTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized OutputTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(OutputTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof OutputTopComponent) {
            return (OutputTopComponent) win;
        }
        Logger.getLogger(OutputTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    public void add(JComponent comp, CallBacks cb) {
        if (ioComp != null) {
            remove(ioComp);
            if (ioCb != null) {
                ioCb.closed();
            }
        }
        ioComp = comp;
        ioCb = cb;
        add(comp);
        validate();
    }

    public JComponent getSelected() {
        return ioComp;
    }
    boolean activated;

    public boolean isActivated() {
        return activated;
    }

    @Override
    protected void componentActivated() {
        super.componentActivated();
        activated = true;
        if (ioCb != null) {
            ioCb.activated();
        }
    }

    @Override
    protected void componentDeactivated() {
        super.componentDeactivated();
        activated = false;
        if (ioCb != null) {
            ioCb.deactivated();
        }
    }

    public boolean isCloseable(JComponent comp) {
        return false;
    }

    public void remove(JComponent comp) {
        if (comp == ioComp) {
            ioComp = null;
            ioCb = null;
        }
    }

    public void select(JComponent comp) {
    }

    public void setIcon(JComponent comp, Icon icon) {
    }

    public void setTitle(JComponent comp, String name) {
    }

    public void setToolTipText(JComponent comp, String text) {
    }

    public void setToolbarActions(JComponent comp, Action[] toolbarActions) {
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }
}
